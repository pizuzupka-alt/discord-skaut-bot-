const { EmbedBuilder } = require('discord.js');
const { economyService } = require('../server/economy');

module.exports = {
    data: {
        name: 'profile',
        aliases: ['profil', 'p', 'me'],
        description: 'Zobraz√≠ tv≈Øj ekonomick√Ω profil a statistiky',
        category: 'Ekonomie',
        usage: '[@u≈æivatel]'
    },
    async execute(message, args) {
        try {
            // Pokud je zm√≠nƒõn u≈æivatel, zobraz jeho profil, jinak vlastn√≠
            const targetUser = message.mentions.users.first() || message.author;
            const user = await economyService.getOrCreateUser(targetUser.id, targetUser.username);
            
            const totalWealth = parseFloat(user.money) + parseFloat(user.bank);
            const isOwnProfile = targetUser.id === message.author.id;
            
            // Spoƒç√≠tej level na z√°kladƒõ experience
            const level = Math.floor(user.experience / 100) + 1;
            const currentLevelXP = user.experience % 100;
            const xpToNextLevel = 100 - currentLevelXP;
            
            // Emoji podle levelu
            let levelEmoji = 'üÜï';
            if (level >= 50) levelEmoji = 'üëë';
            else if (level >= 25) levelEmoji = 'üíé';
            else if (level >= 10) levelEmoji = '‚≠ê';
            else if (level >= 5) levelEmoji = 'ü•â';
            
            // Zjisti pozici na ≈æeb≈ô√≠ƒçku
            const allUsers = await economyService.getLeaderboard(1000);
            const userRank = allUsers.findIndex(u => u.id === targetUser.id) + 1;
            
            const embed = new EmbedBuilder()
                .setColor('#0099ff')
                .setTitle(`${levelEmoji} Profil: ${targetUser.username}`)
                .setThumbnail(targetUser.displayAvatarURL({ dynamic: true }))
                .addFields(
                    {
                        name: 'üí∞ Finanƒçn√≠ p≈ôehled',
                        value: `**Hotovost:** ${parseFloat(user.money).toLocaleString('cs-CZ')} Kƒç\n**V bance:** ${parseFloat(user.bank).toLocaleString('cs-CZ')} Kƒç\n**Celkem:** ${totalWealth.toLocaleString('cs-CZ')} Kƒç`,
                        inline: true
                    },
                    {
                        name: 'üìä Statistiky',
                        value: `**Level:** ${level} ${levelEmoji}\n**XP:** ${user.experience.toLocaleString('cs-CZ')}\n**Do dal≈°√≠ho:** ${xpToNextLevel} XP`,
                        inline: true
                    },
                    {
                        name: 'üíº Kari√©ra',
                        value: `**Povol√°n√≠:** ${user.job}\n**≈Ωeb≈ô√≠ƒçek:** #${userRank || 'N/A'}\n**√öƒçet od:** ${new Date(user.createdAt).toLocaleDateString('cs-CZ')}`,
                        inline: true
                    }
                );

            // P≈ôidej dal≈°√≠ info pro vlastn√≠ profil
            if (isOwnProfile) {
                const now = new Date();
                let cooldowns = [];
                
                if (user.lastDaily) {
                    const nextDaily = new Date(user.lastDaily);
                    nextDaily.setHours(nextDaily.getHours() + 24);
                    if (now < nextDaily) {
                        const hoursLeft = Math.ceil((nextDaily - now) / (1000 * 60 * 60));
                        cooldowns.push(`Daily: ${hoursLeft}h`);
                    } else {
                        cooldowns.push('Daily: ‚úÖ dostupn√Ω');
                    }
                }
                
                if (user.lastWork) {
                    const nextWork = new Date(user.lastWork);
                    nextWork.setHours(nextWork.getHours() + 1);
                    if (now < nextWork) {
                        const minutesLeft = Math.ceil((nextWork - now) / (1000 * 60));
                        cooldowns.push(`Work: ${minutesLeft}m`);
                    } else {
                        cooldowns.push('Work: ‚úÖ dostupn√Ω');
                    }
                }
                
                if (cooldowns.length > 0) {
                    embed.addFields({
                        name: '‚è∞ Cooldowny',
                        value: cooldowns.join('\n'),
                        inline: false
                    });
                }
                
                embed.setFooter({ 
                    text: 'üí° Tip: Pou≈æ√≠vej !daily a !work pro pravideln√Ω p≈ô√≠jem!' 
                });
            } else {
                embed.setFooter({ 
                    text: `Po≈æ√°dal ${message.author.tag}`, 
                    iconURL: message.author.displayAvatarURL() 
                });
            }

            embed.setTimestamp();
            message.reply({ embeds: [embed] });
            
        } catch (error) {
            console.error('Chyba p≈ôi zobrazov√°n√≠ profilu:', error);
            message.reply('‚ùå Do≈°lo k chybƒõ p≈ôi naƒç√≠t√°n√≠ profilu.');
        }
    },
};