require('dotenv').config();
const fs = require('fs');
const path = require('path');
const express = require('express');
const { Client, GatewayIntentBits, Collection } = require('discord.js');

// Express server pro Render
const server = express();
server.all('/', (req, res) => {
    res.send('Bot bƒõ≈æ√≠!');
});
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`üåê Server bƒõ≈æ√≠ na portu ${PORT}`);
});

// Import handlers
const commandHandler = require('./handlers/commandHandler');
const eventHandler = require('./handlers/eventHandler');

// Config objekt
const config = {
    token: process.env.DISCORD_TOKEN,
    prefix: process.env.PREFIX || '!',
    clientId: process.env.CLIENT_ID || '',
    presence: {
        status: 'online',
        activities: [{
            name: process.env.BOT_ACTIVITY || 's Discord.js',
            type: 0
        }]
    },
    permissions: {
        ownerIds: process.env.OWNER_IDS ? process.env.OWNER_IDS.split(',') : [],
        adminRoles: process.env.ADMIN_ROLES ? process.env.ADMIN_ROLES.split(',') : ['Admin', 'Moder√°tor']
    }
};

// Create Discord client
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.DirectMessages,
        GatewayIntentBits.GuildVoiceStates
    ]
});

client.commands = new Collection();
client.config = config;

client.once('ready', () => {
    console.log(`‚úÖ Bot je p≈ôipraven! P≈ôihl√°≈°en jako ${client.user.tag}`);
    if (config.presence) client.user.setPresence(config.presence);
});

client.on('messageCreate', async (message) => {
    await commandHandler.handlePrefixCommand(message, client);
});

client.on('interactionCreate', async (interaction) => {
    if (!interaction.isChatInputCommand()) return;
    const command = client.commands.get(interaction.commandName);
    if (!command) return;

    try {
        await command.execute(interaction);
        console.log(`Slash p≈ô√≠kaz ${interaction.commandName} proveden u≈æivatelem ${interaction.user.tag}`);
    } catch (error) {
        console.error(`Chyba p≈ôi prov√°dƒõn√≠ slash p≈ô√≠kazu ${interaction.commandName}:`, error);
        const errorMessage = '‚ùå Do≈°lo k chybƒõ p≈ôi prov√°dƒõn√≠ tohoto p≈ô√≠kazu!';
        if (interaction.replied || interaction.deferred) {
            await interaction.followUp({ content: errorMessage, ephemeral: true });
        } else {
            await interaction.reply({ content: errorMessage, ephemeral: true });
        }
    }
});

// Initialize bot
async function initialize() {
    try {
        console.log('üöÄ Spou≈°t√≠m inicializaci bota...');

        // Load commands (pouze pokud slo≈æka existuje)
        const commandsPath = path.join(__dirname, 'commands');
        if (fs.existsSync(commandsPath)) {
            await commandHandler.loadCommands(client);
            console.log('‚úÖ P≈ô√≠kazy naƒçteny √∫spƒõ≈°nƒõ');
        } else {
            console.warn('‚ö†Ô∏è Slo≈æka "commands" neexistuje, ≈æ√°dn√© p≈ô√≠kazy nenaƒçteny');
        }

        // Load events (pouze pokud slo≈æka existuje)
        const eventsPath = path.join(__dirname, 'events');
        if (fs.existsSync(eventsPath)) {
            await eventHandler.loadEvents(client);
            console.log('‚úÖ Ud√°losti naƒçteny √∫spƒõ≈°nƒõ');
        } else {
            console.warn('‚ö†Ô∏è Slo≈æka "events" neexistuje, pou≈æ√≠v√°m z√°kladn√≠ ud√°losti');
        }

        // Login to Discord
        if (!config.token) {
            throw new Error('‚ùå Chyb√≠ DISCORD_TOKEN v promƒõnn√Ωch prost≈ôed√≠!');
        }
        await client.login(config.token);

    } catch (error) {
        console.error('‚ùå Nepoda≈ôilo se inicializovat bota!');
        console.error(error);
        console.error(error.stack);
        process.exit(1);
    }
}

// Error handling
process.on('unhandledRejection', error => {
    console.error('Nezvl√°dnut√© odm√≠tnut√≠ promise:', error);
});
process.on('uncaughtException', error => {
    console.error('Nezachycen√° v√Ωjimka:', error);
    process.exit(1);
});

// Start the bot
initialize();
